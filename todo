Next MVP:
	✔ have current system read full request from buffer @done(23-08-13 17:40)
	✔ send valid mockup response to client @done(23-08-19 17:59)
	✔ Make final objects for request and response with only getter and setter @done(23-09-05 15:09)
	✔ Create mockup of req/resp filler to produce a valid result with the webserv @done(23-09-05 15:09)
	☐ then, for the rest of the dev cycle, we can implement "real" operations one by one, without breaking anything
	☐ start implementing methods prototype
	☐ send a variable response to client, with just a specific text response depending on the request : "i received a GET/PUT/etc request"(will need request parsing)
	☐ reponse header constructor, simple step by simple step(biggest unknown for now)
	☐ after all that, it's probably possible to start automating testing, particular cases by particular cases (status, methods, CGI)
	✔ exec CGI (should not be terribly hard,it's an established process) @done(23-10-15 17:59)
	☐ manage exceptions and error (http code, etc.)
TCP:

	✔ mockup parser to print a vector of char @done(23-08-15 15:58)
	✔ Converter from string to int for ip @done(23-10-15 17:58)
	☐ loop of server ports binding to epoll struct (currently only 1)
	✔ protection with throw @done(23-08-13 17:40)
	✔ read_from_client function @done(23-08-12 17:58)
	✔ write_to_client function @done(23-08-12 18:19)
	✔ bool checker is_new_connection @done(23-08-12 18:23)
	✔ send_response @done(23-08-12 18:26)
	☐ is_request_over()
	✔ update_connection_status() !! @done(23-08-15 15:58)
	☐ mockup of reponse for nav
	☐ is_connection_over
	☐ chunked encoding will need to be implemented to manage files (pictures/gif/sound/etc.) chunked request for PUT media, chunked response for GET requests

 Buffer:
	☐ increment_response_count
	☐ bool checker for buffer
	✔ char vector getter for usage @done(23-08-13 17:40)
	☐ buffer editor

Methods:
	✔ GET @done(23-10-15 17:59)
	✔ POST @done(23-10-15 17:59)
	✔ DELETE @done(23-10-15 17:59)
	☐ request object
	☐ main method to call all methods
	☐ request constructor/parser
	☐ response constructor

	//use getline or ifstream to read the file or the pipe after execve
	//remove use of read outside of TCP class -> (currently in file manip and cgi exec)
Note:
	//adding pipe fd to epoll manager seems absolutly disgusting
	//and way more complex than needed, but possible in theory
	//it sound like a super bad practice though
	 